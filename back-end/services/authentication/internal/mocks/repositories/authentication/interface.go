// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/authentication/interface.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	passwordveificationtoken "authentication/internal/domain/entities/password_verification_token"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationRepository is a mock of AuthenticationRepository interface.
type MockAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationRepositoryMockRecorder
}

// MockAuthenticationRepositoryMockRecorder is the mock recorder for MockAuthenticationRepository.
type MockAuthenticationRepositoryMockRecorder struct {
	mock *MockAuthenticationRepository
}

// NewMockAuthenticationRepository creates a new mock instance.
func NewMockAuthenticationRepository(ctrl *gomock.Controller) *MockAuthenticationRepository {
	mock := &MockAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationRepository) EXPECT() *MockAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// DeletePasswordVerificationTokenByID mocks base method.
func (m *MockAuthenticationRepository) DeletePasswordVerificationTokenByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePasswordVerificationTokenByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePasswordVerificationTokenByID indicates an expected call of DeletePasswordVerificationTokenByID.
func (mr *MockAuthenticationRepositoryMockRecorder) DeletePasswordVerificationTokenByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePasswordVerificationTokenByID", reflect.TypeOf((*MockAuthenticationRepository)(nil).DeletePasswordVerificationTokenByID), ctx, id)
}

// GetPasswordVerificationTokenByID mocks base method.
func (m *MockAuthenticationRepository) GetPasswordVerificationTokenByID(ctx context.Context, id string) (passwordveificationtoken.PasswordVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordVerificationTokenByID", ctx, id)
	ret0, _ := ret[0].(passwordveificationtoken.PasswordVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordVerificationTokenByID indicates an expected call of GetPasswordVerificationTokenByID.
func (mr *MockAuthenticationRepositoryMockRecorder) GetPasswordVerificationTokenByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordVerificationTokenByID", reflect.TypeOf((*MockAuthenticationRepository)(nil).GetPasswordVerificationTokenByID), ctx, id)
}

// SavePasswordVerificationToken mocks base method.
func (m *MockAuthenticationRepository) SavePasswordVerificationToken(ctx context.Context, passwordVerificationToken passwordveificationtoken.PasswordVerificationToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePasswordVerificationToken", ctx, passwordVerificationToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePasswordVerificationToken indicates an expected call of SavePasswordVerificationToken.
func (mr *MockAuthenticationRepositoryMockRecorder) SavePasswordVerificationToken(ctx, passwordVerificationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePasswordVerificationToken", reflect.TypeOf((*MockAuthenticationRepository)(nil).SavePasswordVerificationToken), ctx, passwordVerificationToken)
}
